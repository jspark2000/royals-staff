generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SuperAdmin
  Admin
  Normal
  Newbie
}

enum TeamRole {
  HeadCoach
  Coach
  Staff
  Athlete
}

enum Location {
  Integrated
  Seoul
  Suwon
}

enum RecordItem {
  Power
  MuscularEndurance
  Agility
  Speed
  BodyComposition
}

enum RecordEvent {
  BenchPressOne
  BenchPressMax
  ConeDrillOne
  ConeDrillTwo
  DeadLiftOne
  DeadLiftMax
  SquatOne
  SquatMax
  YardDash
}

enum AttendanceType {
  Integrated
  Dispersion
}

enum AttendanceStatus {
  Present
  Tardy
  Absent
}

model Attendance {
  id       Int               @id @default(autoincrement())
  uid      String            @db.Uuid
  date     DateTime          @db.Timestamp(6)
  location Location          @default(Integrated)
  survey   AttendanceStatus  @default(Present)
  checked  Boolean           @default(false)
  isGame   Boolean           @default(false)
  actual   AttendanceStatus?
  reason   String?
  People   People            @relation(fields: [uid], references: [uid], onDelete: Cascade, map: "Attendance_People_uid_fk")

  @@unique([uid, date], map: "uid_date")
}

model BandUser {
  id           Int    @id @default(autoincrement())
  userKey      String @unique @db.VarChar(60)
  userNickname String @db.VarChar(20)
  role         Role   @default(Newbie)
  profileUrl   String @default("https://coresos-phinf.pstatic.net/a/30f048/3_2h2Ud018svcxyrfbhxl9z38_2u6v6s.jpg") @db.VarChar(200)
}

model GameReview {
  id             Int      @id @default(autoincrement())
  postKey        String   @unique @db.VarChar(60)
  userKey        String   @db.VarChar(60)
  submissionTime DateTime @db.Timestamp(6)
}

model Game {
  id            Int       @id @default(autoincrement())
  gameName      String    @unique @db.VarChar(100)
  gameDate      DateTime  @unique @db.Timestamp(6)
  homeTeamName  String    @db.VarChar(30)
  homeTeamScore Int?      @default(0)
  awayTeamName  String    @db.VarChar(30)
  awayTeamScore Int?      @default(0)
  everyone      Boolean?
  deadLine      DateTime? @db.Timestamp(6)
  lateLine      DateTime? @db.Timestamp(6)
}

model GoogleSheet {
  id        Int      @id @default(autoincrement())
  columns   String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  records   String?
  sheetName String?  @db.VarChar(30)
}

model People {
  id               Int          @id @default(autoincrement())
  uid              String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String       @db.VarChar(20)
  studentNo        Int
  studentId        String?      @unique
  teamRole         TeamRole     @default(Athlete)
  attendanceTarget Boolean      @default(true)
  newbie           Boolean      @default(false)
  absence          Boolean      @default(false)
  year             Int          @default(1)
  offPosition      String       @default("no") @db.VarChar(20)
  defPosition      String       @default("no") @db.VarChar(20)
  splPosition      String       @default("no") @db.VarChar(20)
  Attendance       Attendance[]
  Record           Record[]
  Injury           Injury[]

  @@unique([name, studentNo], map: "name_studentNo")
}

model Record {
  id         Int          @id @default(autoincrement())
  uid        String       @db.Uuid
  People     People       @relation(fields: [uid], references: [uid], onDelete: Cascade, map: "Record_People_uid_fk")
  date       DateTime     @db.Timestamp(6)
  item       RecordItem?
  event      RecordEvent?
  eventValue Int          @default(0)

  @@unique([uid, date, item, event], map: "uid_date_item_event")
}

model CoachingStaff {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(20)
  studentNo Int
  teamRole  TeamRole @default(Athlete)
  position  String
}

model Injury {
  id          Int      @id @default(autoincrement())
  People      People   @relation(fields: [peopleId], references: [id])
  peopleId    Int
  description String
  startDate   DateTime @db.Timestamp(6)
  endDate     DateTime @db.Timestamp(6)
  others      String?
}

model SurveyGroup {
  id      Int      @id @default(autoincrement())
  name    String
  surveys Survey[]
}

model Survey {
  id          Int            @id @default(autoincrement())
  surveyGroup SurveyGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int
  date        DateTime       @db.Timestamp(6)
  type        AttendanceType
}
